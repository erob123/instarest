{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Instarest","text":"<p> Declarative, instant REST APIs based on FastAPI, Pydantic, SQLAlchemy, and PostgreSQL </p> <p>Documentation: instarest.erob.io</p> <p>Source Code: github.com/erob123/instarest</p> <p>Instarest provides an opinionated, extensible implementation of a FastAPI, Pydantic, SQLAlchemy, and PostgreSQL stack. It is designed to simplify and reuse common code patterns for these technologies, preventing excess boilerplate and duplicative code.</p> <p>Our goal is to help you turn months of work into days and thousands of lines of code into less than a hundred.</p> <p>By using instarest, you will notice</p> <ul> <li>Simplicity: your typical multi-folder, multi-file, multi-class, multi-method, multi-line, multi-annotation, multi-configuration   FastAPI application will be reduced single file with a few lines of code.</li> <li>Consistency: your application will be built on a consistent, declarative, and opinionated foundation, making it easier to     understand and maintain.</li> <li>Speed: your application will be built on a foundation that is designed to be fast, both in terms of development and runtime     performance.</li> <li>Fewer Unit Tests: your application will be built on a foundation that is designed to be correct, reducing the need for     extensive unit testing.  Complete code coverage can be achieved with a handful of unit tests.</li> <li>Easy: Designed to be easy to use and learn. Less time reading docs.</li> <li>Extensible: Instarest is built to be modular, and as such is easy to extend so that you can have your own custom, realizable opinionations     and abstractions.  Frameworks such as Aimbase and Chainbase are built on top of Instarest in this way.</li> <li>Standards-based: Based on FastAPI, which itself is based on (and fully compatible with) the open standards for APIs: OpenAPI (previously known as Swagger) and JSON Schema</li> </ul>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.11+</li> <li>A PostgreSQL database (use <code>docker-compose</code> to get one up and running quickly)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install instarest\n\n---&gt; 100%\n</code></pre>"},{"location":"#example","title":"Example","text":""},{"location":"#create-it","title":"Create it","text":"<p>Let's create a complete database-backed, type-checked, versioned REST API with Instarest in five minutes:</p> <ul> <li>Create a file <code>main.py</code> with:</li> </ul> <pre><code>from instarest import (\n    AppBase,\n    DeclarativeBase,\n    RESTRouter,\n    SchemaBase,\n    CRUDBase,\n    Initializer,\n)\n\nfrom sqlalchemy import Column, String, Boolean\n\n\nclass EmptyTestModel(DeclarativeBase):\n    bool_field = Column(Boolean(), default=False)\n    title = Column(String(), default=\"title\")\n\ninitializer.execute()\n\n# built pydantic data transfer schemas automagically\ncrud_schemas = SchemaBase(EmptyTestModel)\n\n# build crud db service automagically\ncrud_test = CRUDBase(EmptyTestModel)\n\n# build crud router automagically\ntest_router = RESTRouter(\n    schema_base=crud_schemas,\n    crud_base=crud_test,\n    prefix=\"/test\",\n    allow_delete=True,\n)\n\n# setup base up from routers\napp_base = AppBase(crud_routers=[test_router], app_name=\"Test App API\")\n\n# automagic and version app\nauto_app = app_base.get_autowired_app()\n\n# core underlying app\napp = app_base.get_core_app()\n</code></pre>"},{"location":"#setup-the-database","title":"Setup the database","text":"<p>If you already have a PostgreSQL database running, you can skip this step.</p> <p>If not, we will launch via a local container:</p> <ol> <li> <p>First, make sure that you have docker installed and running.  If you don't, you can install it by following the directions at this link.</p> </li> <li> <p>Download the <code>instarest</code> docker-compose file:</p> </li> </ol> <pre><code>$ curl -O https://raw.githubusercontent.com/erob123/instarest/main/docker-compose.yml\n</code></pre> <ol> <li>Launch the database and pgadmin console via docker-compose from the same directory as the <code>docker-compose.yml</code> file:</li> </ol> <pre><code>$ docker-compose up --build\n</code></pre>"},{"location":"#tell-your-app-how-to-connect-to-the-database","title":"Tell your app how to connect to the database","text":"<p>Instarest is setup to automatically connect to PostgreSQL with just a few Environment variables.  To get started, create a file named <code>local.env</code> in the same directory as <code>main.py</code> with the following contents:</p> <pre><code>POSTGRES_USER=postgres\nPOSTGRES_PASSWORD=postgres\nPOSTGRES_SERVER=localhost\nPOSTGRES_PORT=5432\nPOSTGRES_DB=postgres\n</code></pre> <p>This will allow your app to connect to the database on launch.  For reference, these values are defined within the <code>docker-compose.yml</code> file for local development, but for production they will come from your password defined through your database provider.</p>"},{"location":"#run-it","title":"Run it","text":"<p>You should now have two files in the same directory: <code>main.py</code> and <code>local.env</code>. Let's run the app with:</p> <pre><code>$ uvicorn main:auto_app --reload\n\nINFO:     Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)\nINFO:     Started reloader process [28720]\nINFO:     Started server process [28722]\nINFO:     Waiting for application startup.\nINFO:     Application startup complete.\n</code></pre> About the command <code>uvicorn main:app --reload</code>... <p>The command <code>uvicorn main:auto_app</code> refers to:</p> <ul> <li><code>main</code>: the file <code>main.py</code> (the Python \"module\").</li> <li><code>auto_app</code>: the object created inside of <code>main.py</code> with the line <code>auto_app = app_base.get_autowired_app()</code>.</li> <li><code>--reload</code>: make the server restart after code changes. Only do this for development.</li> </ul>"},{"location":"#interactive-api-docs","title":"Interactive API docs","text":"<p>Now go to http://127.0.0.1:8000/v1/docs.</p> <p>You will see the automatic interactive API documentation (provided by Swagger UI):</p> <p>Congratulations! You have just created your first fully-functional REST API with Instarest, implementing all CRUD operations (Create, Read, Update, Delete).</p>"},{"location":"#check-it","title":"Check it","text":""},{"location":"#step-1-create-a-new-item","title":"Step 1: Create a new item","text":"<p>In the interactive docs (or using <code>curl</code> if you prefer), go to the POST operation and try it. Send this JSON body:</p> <pre><code>{\"title\": \"Hello\", \"bool_field\": true}\n</code></pre> <p>You should see the <code>curl</code> that was sent</p> <pre><code>$ curl -X 'POST' \\\n'http://localhost:8000/v1/test/' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/json' \\\n-d '{\"title\": \"Hello\", \"bool_field\": true}'\n</code></pre> <p>and the response received (with unique <code>id</code>):</p> <pre><code>{\n\"bool_field\": true,\n\"title\": \"Hello\",\n\"id\": \"be79d6de-752d-468d-a649-2e0bc62fcf64\"\n}\n</code></pre>"},{"location":"#step-2-read-the-item-you-just-created","title":"Step 2: Read the item you just created","text":"<p>Open your browser at <code>http://127.0.0.1:8000/v1/test/{id}</code>, replacing <code>{id}</code> with the one you got in the previous step (for example, <code>be79d6de-752d-468d-a649-2e0bc62fcf64</code>).</p> <p>You will see the JSON response as (with the same unique <code>id</code>):</p> <pre><code>{\"bool_field\":true,\"title\":\"Hello\",\"id\":\"be79d6de-752d-468d-a649-2e0bc62fcf64\"}\n</code></pre>"},{"location":"#step-3-update-the-item-you-just-created","title":"Step 3: Update the item you just created","text":"<p>In the interactive docs (or using <code>curl</code> if you prefer), go to the PUT operation and click <code>Try it out</code>. Put the same unique <code>id</code> into the appropriate parameter box as pulled from the <code>GET</code> request in the previous step.  Then, send this JSON body:</p> <pre><code>{\"title\": \"Goodbye\"}\n</code></pre> <p>You should see the <code>curl</code> that was sent</p> <pre><code>$ curl -X 'PUT' \\\n'http://localhost:8000/v1/test/be79d6de-752d-468d-a649-2e0bc62fcf64' \\\n-H 'accept: application/json' \\\n-H 'Content-Type: application/json' \\\n-d '{\"title\": \"Goodbye\"}'\n</code></pre> <p>and the response received (with the same unique <code>id</code>):</p> <pre><code>{\n\"bool_field\": true,\n\"title\": \"Goodbye\",\n\"id\": \"be79d6de-752d-468d-a649-2e0bc62fcf64\"\n}\n</code></pre> <p>Notice that the <code>title</code> field changed from <code>\"Hello\"</code> to <code>\"Goodbye\"</code>, but all other fields remained the same, even though we didn't send them.</p>"},{"location":"#step-4-read-the-item-you-just-updated","title":"Step 4: Read the item you just updated","text":"<p>Open your browser at <code>http://127.0.0.1:8000/v1/test/{id}</code>, replacing <code>{id}</code> with the same one you have been using.</p> <p>You will see the JSON response as (with the same unique <code>id</code>):</p> <pre><code>{\"bool_field\":true,\"title\":\"Goodbye\",\"id\":\"be79d6de-752d-468d-a649-2e0bc62fcf64\"}\n</code></pre> <p>Notice that the <code>title</code> field changed from <code>\"Hello\"</code> to <code>\"Goodbye\"</code>, but all other fields remained the same.</p>"},{"location":"#step-5-delete-the-item-you-just-created","title":"Step 5: Delete the item you just created","text":"<p>In the interactive docs (or using <code>curl</code> if you prefer), go to the DELETE operation and click <code>Try it out</code>. Put the same unique <code>id</code> into the appropriate parameter box that we have been using and click execute.</p> <p>You should see the <code>curl</code> that was sent</p> <pre><code>$ curl -X 'DELETE' \\\n'http://localhost:8000/v1/test/be79d6de-752d-468d-a649-2e0bc62fcf64' \\\n-H 'accept: application/json'\n</code></pre> <p>and the response received:</p> <pre><code>{}\n</code></pre> <p>Now, without clearing the parameter box, click execute again.  You should see a 400 response with the appropriate <code>id</code> in the error message:</p> <pre><code>{\n\"detail\": \"EmptyTest with id: be79d6de-752d-468d-a649-2e0bc62fcf64 not found\"\n}\n</code></pre> <p>A successful delete will return a 200 response with an empty JSON body.  A failed delete will return a 400 response with a JSON body containing the error message.</p>"},{"location":"#step-6-read-the-item-you-just-deleted","title":"Step 6: Read the item you just deleted","text":"<p>Open your browser at <code>http://127.0.0.1:8000/v1/test/{id}</code>, replacing <code>{id}</code> with the same one you have been using.</p> <p>You will see a response with the appropriate <code>id</code> in the error message:</p> <pre><code>{\"detail\":\"EmptyTest with id: be79d6de-752d-468d-a649-2e0bc62fcf64 not found\"}\n</code></pre> <p>And that's it!  You have a fully-functioning, single-store, persistent, versioned REST API with all CRUD operations implemented.</p> <p> All done in under 50 lines of code. </p>"},{"location":"#alternative-api-docs","title":"Alternative API docs","text":"<p>If you prefer, go to http://127.0.0.1:8000/v1/redoc.</p> <p>You will see the alternative automatic documentation (provided by ReDoc):</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the terms of the MIT license.</p>"},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#contibuting","title":"Contibuting","text":"<ol> <li> <p>Set up the precommit hook with <code>pre-commit install</code>.</p> </li> <li> <p>Run tests and get coverage with <code>pytest --cov</code>, and get html reports for vs code live server (or any server) with <code>pytest --cov --cov-report=html:coverage_re</code></p> </li> <li> <p>Open a pull request against the repo!  Please write tests, your coverage will automatically be added as a comment to any PR via GH actions.</p> </li> </ol>"},{"location":"release-notes/","title":"Release Notes","text":""},{"location":"release-notes/#004a2","title":"0.0.4a2","text":"<ul> <li>Initial release.  Work in progress.  Examples in \"examples\" directory show best utilization.</li> </ul>"}]}